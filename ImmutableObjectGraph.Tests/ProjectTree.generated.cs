// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public interface IProjectTree {
		System.String Caption { get; }
		System.String FilePath { get; }
		System.Drawing.Image Icon { get; }
		System.Drawing.Image ExpandedIcon { get; }
		System.Boolean Visible { get; }
		Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties { get; }
		System.Collections.Immutable.ImmutableHashSet<System.String> Capabilities { get; }
		System.Collections.Immutable.ImmutableList<ProjectTree> Children { get; }
	}
	
	public partial class ProjectTree : IProjectTree, System.Collections.Generic.IEnumerable<ProjectTree>, IRecursiveParentWithOrderedChildren, IRecursiveType, IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram> {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectTree DefaultInstance = GetDefaultTemplate();
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String caption;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String filePath;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Drawing.Image icon;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Drawing.Image expandedIcon;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean visible;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly Microsoft.VisualStudio.ProjectSystem.Properties.IRule browseObjectProperties;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableHashSet<System.String> capabilities;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectTree> children;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ProjectTree class.</summary>
		protected ProjectTree(
			System.Int32 identity,
			System.String caption,
			System.String filePath,
			System.Drawing.Image icon,
			System.Drawing.Image expandedIcon,
			System.Boolean visible,
			Microsoft.VisualStudio.ProjectSystem.Properties.IRule browseObjectProperties,
			System.Collections.Immutable.ImmutableHashSet<System.String> capabilities,
			System.Collections.Immutable.ImmutableList<ProjectTree> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>>),
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
		{
			this.identity = identity;
			this.caption = caption;
			this.filePath = filePath;
			this.icon = icon;
			this.expandedIcon = expandedIcon;
			this.visible = visible;
			this.browseObjectProperties = browseObjectProperties;
			this.capabilities = capabilities;
			this.children = children;
			if (!skipValidation.Value) {
				this.Validate();
			}
			this.InitializeLookup(lookupTable);
		}
	
		public static ProjectTree Create(
			System.String caption,
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				caption: Optional.For(caption),
				filePath: Optional.For(filePath.GetValueOrDefault(DefaultInstance.FilePath)),
				icon: Optional.For(icon.GetValueOrDefault(DefaultInstance.Icon)),
				expandedIcon: Optional.For(expandedIcon.GetValueOrDefault(DefaultInstance.ExpandedIcon)),
				visible: Optional.For(visible.GetValueOrDefault(DefaultInstance.Visible)),
				browseObjectProperties: Optional.For(browseObjectProperties.GetValueOrDefault(DefaultInstance.BrowseObjectProperties)),
				capabilities: Optional.For(capabilities.GetValueOrDefault(DefaultInstance.Capabilities)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Caption {
			get { return this.caption; }
		}
	
		public System.String FilePath {
			get { return this.filePath; }
		}
	
		public System.Drawing.Image Icon {
			get { return this.icon; }
		}
	
		public System.Drawing.Image ExpandedIcon {
			get { return this.expandedIcon; }
		}
	
		public System.Boolean Visible {
			get { return this.visible; }
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties {
			get { return this.browseObjectProperties; }
		}
	
		public System.Collections.Immutable.ImmutableHashSet<System.String> Capabilities {
			get { return this.capabilities; }
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectTree> Children {
			get { return this.children; }
		}
		
		/// <summary>Returns a new instance with the Caption property set to the specified value.</summary>
		public ProjectTree WithCaption(System.String value) {
			if (value == this.Caption) {
				return this;
			}
		
			return this.With(caption: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the FilePath property set to the specified value.</summary>
		public ProjectTree WithFilePath(System.String value) {
			if (value == this.FilePath) {
				return this;
			}
		
			return this.With(filePath: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Icon property set to the specified value.</summary>
		public ProjectTree WithIcon(System.Drawing.Image value) {
			if (value == this.Icon) {
				return this;
			}
		
			return this.With(icon: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ExpandedIcon property set to the specified value.</summary>
		public ProjectTree WithExpandedIcon(System.Drawing.Image value) {
			if (value == this.ExpandedIcon) {
				return this;
			}
		
			return this.With(expandedIcon: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Visible property set to the specified value.</summary>
		public ProjectTree WithVisible(System.Boolean value) {
			if (value == this.Visible) {
				return this;
			}
		
			return this.With(visible: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the BrowseObjectProperties property set to the specified value.</summary>
		public ProjectTree WithBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule value) {
			if (value == this.BrowseObjectProperties) {
				return this;
			}
		
			return this.With(browseObjectProperties: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Capabilities property set to the specified value.</summary>
		public ProjectTree WithCapabilities(System.Collections.Immutable.ImmutableHashSet<System.String> value) {
			if (value == this.Capabilities) {
				return this;
			}
		
			return this.With(capabilities: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public ProjectTree WithCapabilities(params System.String[] values) {
			return this.With(capabilities: this.Capabilities.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public ProjectTree WithCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			return this.With(capabilities: this.Capabilities.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public ProjectTree AddCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			return this.With(capabilities: this.Capabilities.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public ProjectTree AddCapabilities(params System.String[] values) {
			return this.With(capabilities: this.Capabilities.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Capabilities collection.</summary>
		public ProjectTree AddCapability(System.String value) {
			return this.With(capabilities: this.Capabilities.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public ProjectTree RemoveCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			return this.With(capabilities: this.Capabilities.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public ProjectTree RemoveCapabilities(params System.String[] values) {
			return this.With(capabilities: this.Capabilities.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Capabilities collection.</summary>
		public ProjectTree RemoveCapability(System.String value) {
			return this.With(capabilities: this.Capabilities.Remove(value));
		}
		
		/// <summary>Clears all elements from the Capabilities collection.</summary>
		public ProjectTree RemoveCapabilities() {
			return this.With(capabilities: this.Capabilities.Clear());
		}
		
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public ProjectTree WithChildren(System.Collections.Immutable.ImmutableList<ProjectTree> value) {
			if (value == this.Children) {
				return this;
			}
		
			return this.With(children: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectTree WithChildren(params ProjectTree[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectTree WithChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectTree AddChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectTree AddChildren(params ProjectTree[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ProjectTree AddChild(ProjectTree value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectTree RemoveChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectTree RemoveChildren(params ProjectTree[] values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public ProjectTree RemoveChild(ProjectTree value) {
			return this.With(children: this.Children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public ProjectTree RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectTree With(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>)) {
			return (ProjectTree)this.WithCore(
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectTree WithCore(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				caption: Optional.For(caption.GetValueOrDefault(this.Caption)),
				filePath: Optional.For(filePath.GetValueOrDefault(this.FilePath)),
				icon: Optional.For(icon.GetValueOrDefault(this.Icon)),
				expandedIcon: Optional.For(expandedIcon.GetValueOrDefault(this.ExpandedIcon)),
				visible: Optional.For(visible.GetValueOrDefault(this.Visible)),
				browseObjectProperties: Optional.For(browseObjectProperties.GetValueOrDefault(this.BrowseObjectProperties)),
				capabilities: Optional.For(capabilities.GetValueOrDefault(this.Capabilities)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectTree WithFactory(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(caption.IsDefined && caption.Value != this.Caption) || 
				(filePath.IsDefined && filePath.Value != this.FilePath) || 
				(icon.IsDefined && icon.Value != this.Icon) || 
				(expandedIcon.IsDefined && expandedIcon.Value != this.ExpandedIcon) || 
				(visible.IsDefined && visible.Value != this.Visible) || 
				(browseObjectProperties.IsDefined && browseObjectProperties.Value != this.BrowseObjectProperties) || 
				(capabilities.IsDefined && capabilities.Value != this.Capabilities) || 
				(children.IsDefined && children.Value != this.Children)) {
				var lookupTable = children.IsDefined && children.Value != this.Children ? default(Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>>) : Optional.For(this.lookupTable);
				return new ProjectTree(
					identity: identity.GetValueOrDefault(this.Identity),
					caption: caption.GetValueOrDefault(this.Caption),
					filePath: filePath.GetValueOrDefault(this.FilePath),
					icon: icon.GetValueOrDefault(this.Icon),
					expandedIcon: expandedIcon.GetValueOrDefault(this.ExpandedIcon),
					visible: visible.GetValueOrDefault(this.Visible),
					browseObjectProperties: browseObjectProperties.GetValueOrDefault(this.BrowseObjectProperties),
					capabilities: capabilities.GetValueOrDefault(this.Capabilities),
					children: children.GetValueOrDefault(this.Children),
					lookupTable: lookupTable);
			} else {
				return this;
			}
		}
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
	
		public System.Collections.Generic.IEnumerator<ProjectTree> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectTree whose fields are initialized with default values.</summary>
		private static ProjectTree GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectTree(
				default(System.Int32),
				template.Caption,
				template.FilePath,
				template.Icon,
				template.ExpandedIcon,
				template.Visible,
				template.BrowseObjectProperties,
				template.Capabilities,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Caption { get; set; }
	
			internal System.String FilePath { get; set; }
	
			internal System.Drawing.Image Icon { get; set; }
	
			internal System.Drawing.Image ExpandedIcon { get; set; }
	
			internal System.Boolean Visible { get; set; }
	
			internal Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties { get; set; }
	
			internal System.Collections.Immutable.ImmutableHashSet<System.String> Capabilities { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectTree> Children { get; set; }
		}
		
		public RootedProjectTree AsRoot {
			get { return new RootedProjectTree(this, this); }
		}
		
		public RootedProjectTree WithRoot(ProjectTree root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectTree(this, root);
		}
		
		/// <summary>
		/// A description of a change made to an instance of an immutable object.
		/// </summary>
		[DebuggerDisplay("{Kind} {(Before ?? After).Caption} ({Identity}) {Changes}")]
		public struct DiffGram {
			private DiffGram(ProjectTree before, ProjectTree after, ChangeKind kind, ProjectTreeChangedProperties changes)
				: this() {
				this.Before = before;
				this.After = after;
				this.Kind = kind;
				this.Changes = changes;
			}
		
			public static DiffGram Change(ProjectTree before, ProjectTree after, ProjectTreeChangedProperties changes) {
				return new DiffGram(before, after, ChangeKind.Replaced, changes);
			}
		
			public static DiffGram Add(ProjectTree value) {
				return new DiffGram(null, value, ChangeKind.Added, default(ProjectTreeChangedProperties));
			}
		
			public static DiffGram Remove(ProjectTree value) {
				return new DiffGram(value, null, ChangeKind.Removed, default(ProjectTreeChangedProperties));
			}
		
			/// <summary>
			/// Gets the leaf node before the change.
			/// </summary>
			public ProjectTree Before { get; private set; }
		
			/// <summary>
			/// Gets the leaf node after the change.
			/// </summary>
			public ProjectTree After { get; private set; }
		
			/// <summary>
			/// Gets the kind of change made to the alterered node.
			/// </summary>
			public ChangeKind Kind { get; private set; }
		
			/// <summary>
			/// Gets the kinds of changes made to node if <see cref="Kind"/> is <see cref="ChangeKind.Replaced"/>.
			/// </summary>
			public ProjectTreeChangedProperties Changes { get; private set; }
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.Caption" /> was changed.
			/// </summary>
			public bool IsCaptionChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.Caption) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.FilePath" /> was changed.
			/// </summary>
			public bool IsFilePathChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.FilePath) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.Icon" /> was changed.
			/// </summary>
			public bool IsIconChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.Icon) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.ExpandedIcon" /> was changed.
			/// </summary>
			public bool IsExpandedIconChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.ExpandedIcon) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.Visible" /> was changed.
			/// </summary>
			public bool IsVisibleChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.Visible) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.BrowseObjectProperties" /> was changed.
			/// </summary>
			public bool IsBrowseObjectPropertiesChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.BrowseObjectProperties) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectTree.Capabilities" /> was changed.
			/// </summary>
			public bool IsCapabilitiesChanged {
				get { return (this.Changes & ProjectTreeChangedProperties.Capabilities) != ProjectTreeChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets the identity of the affected object.
			/// </summary>
			public System.Int32 Identity {
				get { return (this.Before ?? this.After).Identity; }
			}
		}
		
		public static class Comparers {
			/// <summary>Gets an equatable comparer that considers only the persistent identity of a pair of values.</summary>
			public static System.Collections.Generic.IEqualityComparer<ProjectTree> Identity {
				get { return ImmutableObjectGraph.Comparers.Identity; }
			}
		
			/// <summary>Gets an equatable comparer that compares all properties between two instances.</summary>
			public static System.Collections.Generic.IEqualityComparer<ProjectTree> ByValue {
				get { return ImmutableObjectGraph.Comparers.ByValue<ProjectTreeChangedProperties, DiffGram>(deep: false); }
			}
		
			/// <summary>Gets an equatable comparer that considers all properties between two instances and their children.</summary>
			public static System.Collections.Generic.IEqualityComparer<ProjectTree> ByValueWithDescendents {
				get { return ImmutableObjectGraph.Comparers.ByValue<ProjectTreeChangedProperties, DiffGram>(deep: true); }
			}
		
			internal static System.Collections.Generic.IEqualityComparer<ParentedRecursiveType<ProjectTree, ProjectTree>> ParentedProjectTreeIdentity {
				get { return ImmutableObjectGraph.Comparers.Parented<ProjectTree, ProjectTree>(); }
			}
		}
		
		ProjectTreeChangedProperties IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.ParentProperty {
			get { return ProjectTreeChangedProperties.Parent; }
		}
		
		ProjectTreeChangedProperties IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.PositionUnderParentProperty {
			get { return ProjectTreeChangedProperties.PositionUnderParent; }
		}
		
		ProjectTreeChangedProperties IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.DiffProperties(IRecursiveType other) {
			return this.DiffProperties((ProjectTree)other);
		}
		
		ProjectTree.DiffGram IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.Change(IRecursiveType before, IRecursiveType after, ProjectTreeChangedProperties diff) {
			return DiffGram.Change((ProjectTree)before, (ProjectTree)after, diff);
		}
		
		ProjectTree.DiffGram IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.Add(IRecursiveType after) {
			return DiffGram.Add((ProjectTree)after);
		}
		
		ProjectTree.DiffGram IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.Remove(IRecursiveType before) {
			return DiffGram.Remove((ProjectTree)before);
		}
		
		bool IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.Equals(ProjectTreeChangedProperties first, ProjectTreeChangedProperties second) {
			return first == second;
		}
		
		ProjectTreeChangedProperties IRecursiveDiffingType<ProjectTreeChangedProperties, ProjectTree.DiffGram>.Union(ProjectTreeChangedProperties first, ProjectTreeChangedProperties second) {
			return first | second;
		}
		
		protected virtual ProjectTreeChangedProperties DiffProperties(ProjectTree other) {
			if (other == null) {
				throw new System.ArgumentNullException("other");
			}
		
			var propertiesChanged = ProjectTreeChangedProperties.None;
		
			if (this != other) {
				if (!this.GetType().IsEquivalentTo(other.GetType())) {
					propertiesChanged |= ProjectTreeChangedProperties.Type;
				}
		
				if (this.Caption != other.Caption) {
					propertiesChanged |= ProjectTreeChangedProperties.Caption;
				}
		
				if (this.FilePath != other.FilePath) {
					propertiesChanged |= ProjectTreeChangedProperties.FilePath;
				}
		
				if (this.Icon != other.Icon) {
					propertiesChanged |= ProjectTreeChangedProperties.Icon;
				}
		
				if (this.ExpandedIcon != other.ExpandedIcon) {
					propertiesChanged |= ProjectTreeChangedProperties.ExpandedIcon;
				}
		
				if (this.Visible != other.Visible) {
					propertiesChanged |= ProjectTreeChangedProperties.Visible;
				}
		
				if (this.BrowseObjectProperties != other.BrowseObjectProperties) {
					propertiesChanged |= ProjectTreeChangedProperties.BrowseObjectProperties;
				}
		
				if (this.Capabilities != other.Capabilities) {
					propertiesChanged |= ProjectTreeChangedProperties.Capabilities;
				}
			}
		
			return propertiesChanged;
		}
		
		protected ProjectTree SyncImmediateChildToCurrentVersion(ProjectTree child) {
			ProjectTree currentValue;
			if (!this.TryFindImmediateChild(child.Identity, out currentValue)) {
				throw new System.ArgumentException();
			}
		
			return currentValue;
		}
		
		public ProjectTree AddDescendent(ProjectTree value, ProjectTree parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (ProjectTree)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public ProjectTree RemoveDescendent(ProjectTree value) {
			var spine = this.GetSpine(value);
			var spineList = spine.ToList();
			var parent = (ProjectTree)spineList[spineList.Count - 2];
			var newParent = parent.RemoveChildren(spineList[spineList.Count - 1]);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((ProjectTree)newParent);
			return (ProjectTree)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		public ProjectTree ReplaceDescendent(ProjectTree current, ProjectTree replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (ProjectTree)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		private System.Collections.Immutable.ImmutableStack<ProjectTree> ReplaceDescendent(System.Collections.Immutable.ImmutableStack<ProjectTree> spine, System.Collections.Immutable.ImmutableStack<ProjectTree> replacementStackTip, bool spineIncludesDeletedElement) {
			Debug.Assert(this == spine.Peek());
			var remainingSpine = spine.Pop();
			if (remainingSpine.IsEmpty || (spineIncludesDeletedElement && remainingSpine.Pop().IsEmpty)) {
				// This is the instance to be changed.
				return replacementStackTip;
			}
		
			System.Collections.Immutable.ImmutableStack<ProjectTree> newChildSpine;
			var child = remainingSpine.Peek();
			var recursiveChild = child as ProjectTree;
			if (recursiveChild != null) {
				newChildSpine = recursiveChild.ReplaceDescendent(remainingSpine, replacementStackTip, spineIncludesDeletedElement);
			} else {
				Debug.Assert(remainingSpine.Pop().IsEmpty); // we should be at the tail of the stack, since we're at a leaf.
				Debug.Assert(this.Children.Contains(child));
				newChildSpine = replacementStackTip;
			}
		
			var newChildren = this.Children.Replace(child, newChildSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
			if (newSelf.lookupTable == lookupTableLazySentinal && this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = this.FixupLookupTable(ImmutableDeque.Create(newChildSpine), ImmutableDeque.Create(remainingSpine));
				newSelf.ValidateInternalIntegrityDebugOnly();
			}
		
			return newChildSpine.Push(newSelf);
		}
		
		/// <summary>
		/// Produces a fast lookup table based on an existing one, if this node has one, to account for an updated spine among its descendents.
		/// </summary>
		/// <param name="updatedSpine">
		/// The spine of this node's new descendents' instances that are created for this change.
		/// The head is an immediate child of the new instance for this node.
		/// The tail is the node that was added or replaced.
		/// </param>
		/// <param name="oldSpine">
		/// The spine of this node's descendents that have been changed in this delta.
		/// The head is an immediate child of this instance.
		/// The tail is the node that was removed or replaced.
		/// </param>
		/// <returns>An updated lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>> FixupLookupTable(ImmutableObjectGraph.ImmutableDeque<ProjectTree> updatedSpine, ImmutableObjectGraph.ImmutableDeque<ProjectTree> oldSpine) {
			if (this.lookupTable == null || this.lookupTable == lookupTableLazySentinal) {
				// We don't already have a lookup table to base this on, so leave it to the new instance to lazily construct.
				return lookupTableLazySentinal;
			}
		
			if ((updatedSpine.IsEmpty && oldSpine.IsEmpty) ||
				(updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead(), oldSpine.PeekHead()))) {
				// No changes were actually made.
				return this.lookupTable;
			}
		
			var lookupTable = this.lookupTable.ToBuilder();
		
			// Classify the kind of change that has just occurred.
			var oldSpineTail = oldSpine.PeekTail();
			var newSpineTail = updatedSpine.PeekTail();
			ChangeKind changeKind;
			bool childrenChanged = false;
			if (updatedSpine.Count == oldSpine.Count) {
				changeKind = ChangeKind.Replaced;
				var oldSpineTailRecursive = oldSpineTail as ProjectTree;
				var newSpineTailRecursive = newSpineTail as ProjectTree;
				if (oldSpineTailRecursive != null || newSpineTailRecursive != null) {
					// Children have changed if either before or after type didn't have a children property,
					// or if both did, but the children actually changed.
					childrenChanged = oldSpineTailRecursive == null || newSpineTailRecursive == null
						|| !System.Object.ReferenceEquals(oldSpineTailRecursive.Children, newSpineTailRecursive.Children);
				}
			} else if (updatedSpine.Count > oldSpine.Count) {
				changeKind = ChangeKind.Added;
			} else // updatedSpine.Count < oldSpine.Count
			{
				changeKind = ChangeKind.Removed;
			}
		
			// Trim the lookup table of any entries for nodes that have been removed from the tree.
			if (childrenChanged || changeKind == ChangeKind.Removed) {
				// We need to remove all descendents of the old tail node.
				lookupTable.RemoveRange(oldSpineTail.GetSelfAndDescendents().Select(n => n.Identity));
			} else if (changeKind == ChangeKind.Replaced && oldSpineTail.Identity != newSpineTail.Identity) {
				// The identity of the node was changed during the replacement.  We must explicitly remove the old entry
				// from our lookup table in this case.
				lookupTable.Remove(oldSpineTail.Identity);
		
				// We also need to update any immediate children of the old spine tail
				// because the identity of their parent has changed.
				var oldSpineTailRecursive = oldSpineTail as ProjectTree;
				if (oldSpineTailRecursive != null) {
					foreach (var child in oldSpineTailRecursive) {
						lookupTable[child.Identity] = new System.Collections.Generic.KeyValuePair<ProjectTree, int>(child, newSpineTail.Identity);
					}
				}
			}
		
			// Update our lookup table so that it includes (updated) entries for every member of the spine itself.
			ProjectTree parent = this;
			foreach (var node in updatedSpine) {
				// Remove and add rather than use the Set method, since the old and new node are equal (in identity) therefore the map class will
				// assume no change is relevant and not apply the change.
				lookupTable.Remove(node.Identity);
				lookupTable.Add(node.Identity, new System.Collections.Generic.KeyValuePair<ProjectTree, int>(node, parent.Identity));
				parent = node;
			}
		
			// There may be children on the added node that we should include.
			if (childrenChanged || changeKind == ChangeKind.Added) {
				var recursiveParent = parent as ProjectTree;
				if (recursiveParent != null) {
					recursiveParent.ContributeDescendentsToLookupTable(lookupTable);
				}
			}
		
			return lookupTable.ToImmutable();
		}
		
		/// <summary>
		/// Validates this node and all its descendents <em>only in DEBUG builds</em>.
		/// </summary>
		[Conditional("DEBUG")]
		private void ValidateInternalIntegrityDebugOnly() {
			this.ValidateInternalIntegrity();
		}
		
		/// <summary>
		/// Validates this node and all its descendents.
		/// </summary>
		protected internal void ValidateInternalIntegrity() {
			// Each node id appears at most once.
			var observedIdentities = new System.Collections.Generic.HashSet<int>();
			foreach (var node in this.GetSelfAndDescendents()) {
				if (!observedIdentities.Add(node.Identity)) {
					throw new RecursiveChildNotUniqueException(node.Identity);
				}
			}
		
			// The lookup table (if any) accurately describes the contents of this tree.
			if (this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// The table should have one entry for every *descendent* of this node (not this node itself).
				int expectedCount = this.GetSelfAndDescendents().Count() - 1;
				int actualCount = this.lookupTable.Count;
				if (actualCount != expectedCount) {
					throw new System.ApplicationException(string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expected {0} entries in lookup table but found {1}.", expectedCount, actualCount));
				}
		
				this.ValidateLookupTable(this.lookupTable);
			}
		}
		
		/// <summary>
		/// Validates that the contents of a lookup table are valid for all descendent nodes of this node.
		/// </summary>
		/// <param name="lookupTable">The lookup table being validated.</param>
		private void ValidateLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>> lookupTable) {
			const string ErrorString = "Lookup table integrity failure.";
		
			foreach (var child in this.Children) {
				var entry = lookupTable[child.Identity];
				if (!object.ReferenceEquals(entry.Key, child)) {
					throw new System.ApplicationException(ErrorString);
				}
		
				if (entry.Value != this.Identity) {
					throw new System.ApplicationException(ErrorString);
				}
		
				var recursiveChild = child as ProjectTree;
				if (recursiveChild != null) {
					recursiveChild.ValidateLookupTable(lookupTable);
				}
			}
		}
		
		private static readonly System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>> lookupTableLazySentinal = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>().Add(default(System.Int32), new System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>());
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>> lookupTable;
		
		private int inefficiencyLoad;
		
		/// <summary>
		/// The maximum number of steps allowable for a search to be done among this node's children
		/// before a faster lookup table will be built.
		/// </summary>
		internal const int InefficiencyLoadThreshold = 16;
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>> LookupTable {
			get {
				if (this.lookupTable == lookupTableLazySentinal) {
					this.lookupTable = this.CreateLookupTable();
					this.inefficiencyLoad = 1;
				}
		
				return this.lookupTable;
			}
		}
		
		private void InitializeLookup(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>> priorLookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>>)) {
			int inefficiencyLoad = 1; // use local until we know final value since that's faster than field access.
			if (priorLookupTable.IsDefined && priorLookupTable.Value != null) {
				this.lookupTable = priorLookupTable.Value;
			} else {
				if (this.children != null) {
					if (this.children.Count >= InefficiencyLoadThreshold) {
						// The number of children alone are enough to put us over the threshold, skip enumeration.
						inefficiencyLoad = InefficiencyLoadThreshold + 1;
					} else if (this.children.Count > 0) {
						foreach (var child in this.children) {
							var recursiveChild = child as ProjectTree;
							inefficiencyLoad += recursiveChild != null ? recursiveChild.inefficiencyLoad : 1;
							if (inefficiencyLoad > InefficiencyLoadThreshold) {
								break; // It's ok to under-estimate once we're above the threshold since any further would be a waste of time.
							}
						}
					}
				}
		
				if (inefficiencyLoad > InefficiencyLoadThreshold) {
					inefficiencyLoad = 1;
					this.lookupTable = lookupTableLazySentinal;
				}
			}
		
			this.inefficiencyLoad = inefficiencyLoad;
			this.ValidateInternalIntegrityDebugOnly();
		}
		
		/// <summary>
		/// Creates the lookup table that will contain all this node's children.
		/// </summary>
		/// <returns>The lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>> CreateLookupTable() {
			var table = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>().ToBuilder();
			this.ContributeDescendentsToLookupTable(table);
			return table.ToImmutable();
		}
		
		/// <summary>
		/// Adds this node's children (recursively) to the lookup table.
		/// </summary>
		/// <param name="seedLookupTable">The lookup table to add entries to.</param>
		/// <returns>The new lookup table.</returns>
		private void ContributeDescendentsToLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>>.Builder seedLookupTable)
		{
			foreach (var child in this.Children)
			{
				seedLookupTable.Add(child.Identity, new System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32>(child, this.Identity));
				var recursiveChild = child as ProjectTree;
				if (recursiveChild != null) {
					recursiveChild.ContributeDescendentsToLookupTable(seedLookupTable);
				}
			}
		}
		
		public bool TryFind(System.Int32 identity, out ProjectTree value) {
			if (this.Identity.Equals(identity)) {
				value = this;
				return true;
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					value = lookupValue.Key;
					return true;
				}
			} else {
				// No lookup table means we have to exhaustively search each child and its descendents.
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectTree;
					if (recursiveChild != null) {
						if (recursiveChild.TryFind(identity, out value)) {
							return true;
						}
					} else {
						if (child.Identity.Equals(identity)) {
							value = child;
							return true;
						}
					}
				}
			}
		
			value = null;
			return false;
		}
		
		public ProjectTree Find(System.Int32 identity) {
			ProjectTree result;
			if (this.TryFind(identity, out result)) {
				return result;
			}
		
			throw new System.Collections.Generic.KeyNotFoundException();
		}
		
		public bool TryFindImmediateChild(System.Int32 identity, out ProjectTree value) {
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue) && lookupValue.Value == this.Identity) {
					value = lookupValue.Key;
					return true;
				}
			} else {
				// No lookup table means we have to exhaustively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						value = child;
						return true;
					}
				}
			}
		
			value = null;
			return false;
		}
		
		/// <summary>Checks whether an object with the specified identity is among this object's descendents.</summary>
		public bool Contains(System.Int32 identity) {
			ProjectTree result;
			return this.TryFind(identity, out result) && result != this;
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ParentedRecursiveType<ProjectTree, ProjectTree> GetParentedNode(System.Int32 identity) {
			if (this.Identity == identity) {
				return new ParentedRecursiveType<ProjectTree, ProjectTree>(this, null);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					var parentIdentity = lookupValue.Value;
					return new ParentedRecursiveType<ProjectTree, ProjectTree>(this.LookupTable[identity].Key, (ProjectTree)this.Find(parentIdentity));
				}
			} else {
				// No lookup table means we have to aggressively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						return new ParentedRecursiveType<ProjectTree, ProjectTree>(child, this);
					}
		
					var recursiveChild = child as ProjectTree;
					if (recursiveChild != null) {
						var childResult = recursiveChild.GetParentedNode(identity);
						if (childResult.Value != null) {
							return childResult;
						}
					} 
				}
			}
		
			return default(ParentedRecursiveType<ProjectTree, ProjectTree>);
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ProjectTree GetParent(ProjectTree descendent) {
			return this.GetParentedNode(descendent.Identity).Parent;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectTree> GetSpine(System.Int32 descendent) {
			var emptySpine = System.Collections.Immutable.ImmutableStack.Create<ProjectTree>();
			if (this.Identity.Equals(descendent)) {
				return emptySpine.Push(this);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectTree, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(descendent, out lookupValue))
				{
					// Awesome.  We know the node the caller is looking for is a descendent of this node.
					// Now just string together all the nodes that connect this one with the sought one.
					var spine = emptySpine;
					do
					{
						spine = spine.Push(lookupValue.Key);
					}
					while (this.lookupTable.TryGetValue(lookupValue.Value, out lookupValue));
					return spine.Push(this);
				}
			} else {
				// We don't have an efficient lookup table for this node.  Aggressively search every child.
				var spine = emptySpine;
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectTree;
					if (recursiveChild != null) {
						spine = recursiveChild.GetSpine(descendent);
					} else if (child.Identity.Equals(descendent)) {
						spine = spine.Push(child);
					}
		
					if (!spine.IsEmpty) {
						return spine.Push(this);
					}
				}
			}
		
			// The descendent is not in this sub-tree.
			return emptySpine;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectTree> GetSpine(ProjectTree descendent) {
			return this.GetSpine(descendent.Identity);
		}
		
		internal static ProjectTree CreateWithIdentity(
				System.String caption,
				ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
				ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
				ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					caption: Optional.For(caption),
					filePath: Optional.For(filePath.GetValueOrDefault(DefaultInstance.FilePath)),
					icon: Optional.For(icon.GetValueOrDefault(DefaultInstance.Icon)),
					expandedIcon: Optional.For(expandedIcon.GetValueOrDefault(DefaultInstance.ExpandedIcon)),
					visible: Optional.For(visible.GetValueOrDefault(DefaultInstance.Visible)),
					browseObjectProperties: Optional.For(browseObjectProperties.GetValueOrDefault(DefaultInstance.BrowseObjectProperties)),
					capabilities: Optional.For(capabilities.GetValueOrDefault(DefaultInstance.Capabilities)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public virtual ProjectItemTree ToProjectItemTree(
			Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext,
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			ProjectItemTree that = this as ProjectItemTree;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemTree))) {
				if ((projectPropertiesContext == that.ProjectPropertiesContext) && 
				    (!propertySheet.IsDefined || propertySheet.Value == that.PropertySheet) && 
				    (!isLinked.IsDefined || isLinked.Value == that.IsLinked)) {
					return that;
				}
			}
		
			return ProjectItemTree.CreateWithIdentity(
				caption: this.Caption,
				filePath: Optional.For(this.FilePath),
				icon: Optional.For(this.Icon),
				expandedIcon: Optional.For(this.ExpandedIcon),
				visible: Optional.For(this.Visible),
				browseObjectProperties: Optional.For(this.BrowseObjectProperties),
				capabilities: Optional.For(this.Capabilities),
				children: Optional.For(this.Children),
				identity: this.Identity,
				projectPropertiesContext: projectPropertiesContext,
				propertySheet: propertySheet,
				isLinked: isLinked);
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectTree immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String caption;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String filePath;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Drawing.Image icon;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Drawing.Image expandedIcon;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Boolean visible;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected Microsoft.VisualStudio.ProjectSystem.Properties.IRule browseObjectProperties;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>.Builder> capabilities;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>.Builder> children;
		
			internal Builder(ProjectTree immutable) {
				this.immutable = immutable;
		
				this.caption = immutable.Caption;
				this.filePath = immutable.FilePath;
				this.icon = immutable.Icon;
				this.expandedIcon = immutable.ExpandedIcon;
				this.visible = immutable.Visible;
				this.browseObjectProperties = immutable.BrowseObjectProperties;
			}
		
			public System.String Caption {
				get {
					return this.caption;
				}
		
				set {
					this.caption = value;
				}
			}
		
			public System.String FilePath {
				get {
					return this.filePath;
				}
		
				set {
					this.filePath = value;
				}
			}
		
			public System.Drawing.Image Icon {
				get {
					return this.icon;
				}
		
				set {
					this.icon = value;
				}
			}
		
			public System.Drawing.Image ExpandedIcon {
				get {
					return this.expandedIcon;
				}
		
				set {
					this.expandedIcon = value;
				}
			}
		
			public System.Boolean Visible {
				get {
					return this.visible;
				}
		
				set {
					this.visible = value;
				}
			}
		
			public Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties {
				get {
					return this.browseObjectProperties;
				}
		
				set {
					this.browseObjectProperties = value;
				}
			}
		
			public System.Collections.Immutable.ImmutableHashSet<System.String>.Builder Capabilities {
				get {
					if (!this.capabilities.IsDefined) {
						this.capabilities = this.immutable.capabilities != null ? this.immutable.capabilities.ToBuilder() : null;
					}
		
					return this.capabilities.Value;
				}
		
				set {
					this.capabilities = value;
				}
			}
		
			public System.Collections.Immutable.ImmutableList<ProjectTree>.Builder Children {
				get {
					if (!this.children.IsDefined) {
						this.children = this.immutable.children != null ? this.immutable.children.ToBuilder() : null;
					}
		
					return this.children.Value;
				}
		
				set {
					this.children = value;
				}
			}
		
			public ProjectTree ToImmutable() {
				var capabilities = this.capabilities.IsDefined ? (this.capabilities.Value != null ? this.capabilities.Value.ToImmutable() : null) : this.immutable.Capabilities;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Caption),
					ImmutableObjectGraph.Optional.For(this.FilePath),
					ImmutableObjectGraph.Optional.For(this.Icon),
					ImmutableObjectGraph.Optional.For(this.ExpandedIcon),
					ImmutableObjectGraph.Optional.For(this.Visible),
					ImmutableObjectGraph.Optional.For(this.BrowseObjectProperties),
					ImmutableObjectGraph.Optional.For(capabilities),
					ImmutableObjectGraph.Optional.For(children));
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get { return this.Children; }
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			var parented = this.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(parented.Value, parented.Parent);
		}
		int IRecursiveParentWithOrderedChildren.IndexOf(IRecursiveType value) {
			return this.Children.IndexOf((ProjectTree)value);
		}
	
		int IRecursiveType.Identity {
			get { return this.Identity; }
		}
	}
	
	public partial struct RootedProjectTree : System.IEquatable<RootedProjectTree>, IRecursiveParent {
		private static readonly System.Func<RootedProjectTree, ProjectTree> toUnrooted = r => r.ProjectTree;
		private static readonly System.Func<ProjectTree, ProjectTree, RootedProjectTree> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectTree greenNode;
	
		private readonly ProjectTree root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectTree, RootedProjectTree, ProjectTree>> children;
	
		internal RootedProjectTree(ProjectTree projectTree, ProjectTree root) {
			this.greenNode = projectTree;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectTree, RootedProjectTree, ProjectTree>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectTree Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectTree);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectTree);
			}
		}
	
		public RootedProjectTree Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectTree); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public bool IsProjectItemTree {
			get { return this.greenNode is ProjectItemTree; }
		}
	
		public RootedProjectItemTree AsProjectItemTree {
			get { return this.greenNode != null ? ((ProjectItemTree)this.greenNode).WithRoot(this.root) : default(RootedProjectItemTree); }
		}
	
		public bool IsRoot {
			get { return this.root == this.greenNode; }
		}
	
		public System.String Caption {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Caption;
			}
		}
		
		/// <summary>Returns a new instance with the Caption property set to the specified value.</summary>
		public RootedProjectTree WithCaption(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCaption(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String FilePath {
			get {
				this.ThrowIfDefault();
				return this.greenNode.FilePath;
			}
		}
		
		/// <summary>Returns a new instance with the FilePath property set to the specified value.</summary>
		public RootedProjectTree WithFilePath(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithFilePath(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Drawing.Image Icon {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Icon;
			}
		}
		
		/// <summary>Returns a new instance with the Icon property set to the specified value.</summary>
		public RootedProjectTree WithIcon(System.Drawing.Image value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithIcon(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Drawing.Image ExpandedIcon {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ExpandedIcon;
			}
		}
		
		/// <summary>Returns a new instance with the ExpandedIcon property set to the specified value.</summary>
		public RootedProjectTree WithExpandedIcon(System.Drawing.Image value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithExpandedIcon(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Boolean Visible {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Visible;
			}
		}
		
		/// <summary>Returns a new instance with the Visible property set to the specified value.</summary>
		public RootedProjectTree WithVisible(System.Boolean value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithVisible(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties {
			get {
				this.ThrowIfDefault();
				return this.greenNode.BrowseObjectProperties;
			}
		}
		
		/// <summary>Returns a new instance with the BrowseObjectProperties property set to the specified value.</summary>
		public RootedProjectTree WithBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithBrowseObjectProperties(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Collections.Immutable.ImmutableHashSet<System.String> Capabilities {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Capabilities;
			}
		}
		
		/// <summary>Returns a new instance with the Capabilities property set to the specified value.</summary>
		public RootedProjectTree WithCapabilities(System.Collections.Immutable.ImmutableHashSet<System.String> value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCapabilities(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public RootedProjectTree WithCapabilities(params System.String[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public RootedProjectTree WithCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public RootedProjectTree AddCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public RootedProjectTree AddCapabilities(params System.String[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Capabilities collection.</summary>
		public RootedProjectTree AddCapability(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddCapability(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public RootedProjectTree RemoveCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public RootedProjectTree RemoveCapabilities(params System.String[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Capabilities collection.</summary>
		public RootedProjectTree RemoveCapability(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapability(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Capabilities collection.</summary>
		public RootedProjectTree RemoveCapabilities() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapabilities();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectTree> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public RootedProjectTree WithChildren(System.Collections.Immutable.IImmutableList<RootedProjectTree> value) {
			this.ThrowIfDefault();
			var adapter = (ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectTree>)value;
			var mutatedLeaf = this.greenNode.WithChildren(adapter.UnderlyingCollection);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTree WithChildren(params RootedProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTree WithChildren(System.Collections.Generic.IEnumerable<RootedProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTree AddChildren(System.Collections.Generic.IEnumerable<RootedProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTree AddChildren(params RootedProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectTree, RootedProjectTree> AddChild(RootedProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectTree);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectTree(value.ProjectTree, newParent.Root.ProjectTree);
			return new ParentedRecursiveType<RootedProjectTree, RootedProjectTree>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTree RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTree RemoveChildren(params RootedProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectTree RemoveChild(RootedProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectTree);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTree WithChildren(params ProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTree WithChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTree AddChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTree AddChildren(params ProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectTree, RootedProjectTree> AddChild(ProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectTree(value, newParent.Root.ProjectTree);
			return new ParentedRecursiveType<RootedProjectTree, RootedProjectTree>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTree RemoveChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTree RemoveChildren(params ProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectTree RemoveChild(ProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectTree RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectTree ProjectTree {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectTree With(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectTree>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectTree>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectTree>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public static RootedProjectTree Create(
			System.String caption,
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectTree>>)) {
			var greenNode = ProjectTree.Create(
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectTree>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectTree>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>));
			return greenNode.AsRoot;
		}
	
		public RootedProjectTree Find(System.Int32 identity) {
			this.ThrowIfDefault();
			return this.greenNode.Find(identity).WithRoot(this.root);
		}
	
		public bool TryFind(System.Int32 identity, out RootedProjectTree value) {
			this.ThrowIfDefault();
			ProjectTree greenValue;
			if (this.greenNode.TryFind(identity, out greenValue)) {
				value = greenValue.WithRoot(this.root);
				return true;
			}
	
			value = default(RootedProjectTree);
			return false;
		}
	
		public System.Collections.Generic.IEnumerator<RootedProjectTree> GetEnumerator() {
			return this.Children.GetEnumerator();
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectTree.DiffGram> ChangesSince(RootedProjectTree priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectTree);
		}
		
		public RootedProjectItemTree ToProjectItemTree(
			Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext,
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectItemTree(
					projectPropertiesContext: projectPropertiesContext,
					propertySheet: propertySheet,
					isLinked: isLinked);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectTree) {
				var other = (RootedProjectTree)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectTree other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectTree NewSpine(ProjectTree leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectTree.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	[System.Flags]
	public enum ProjectTreeChangedProperties : uint {
		/// <summary>
		/// No change was made to the node.  It was either entirely added or removed. 
		/// </summary>
		None = 0x0,
	
		/// <summary>
		/// The type of the node was changed.
		/// </summary>
		Type = 0x1,
	
		/// <summary>
		/// The node's position within its parent's list of children changed.
		/// </summary>
		PositionUnderParent = 0x2,
		
		/// <summary>
		/// The node was removed and reappeared in a new position in the tree (with a different parent).
		/// </summary>
		Parent = 0x4,
	
		/// <summary>
		/// The Caption property was changed.
		/// </summary>
		Caption = 0x8,
	
		/// <summary>
		/// The FilePath property was changed.
		/// </summary>
		FilePath = 0x10,
	
		/// <summary>
		/// The Icon property was changed.
		/// </summary>
		Icon = 0x20,
	
		/// <summary>
		/// The ExpandedIcon property was changed.
		/// </summary>
		ExpandedIcon = 0x40,
	
		/// <summary>
		/// The Visible property was changed.
		/// </summary>
		Visible = 0x80,
	
		/// <summary>
		/// The BrowseObjectProperties property was changed.
		/// </summary>
		BrowseObjectProperties = 0x100,
	
		/// <summary>
		/// The Capabilities property was changed.
		/// </summary>
		Capabilities = 0x200,
	
		/// <summary>
		/// The ProjectPropertiesContext property was changed.
		/// </summary>
		ProjectPropertiesContext = 0x400,
	
		/// <summary>
		/// The PropertySheet property was changed.
		/// </summary>
		PropertySheet = 0x800,
	
		/// <summary>
		/// The IsLinked property was changed.
		/// </summary>
		IsLinked = 0x1000,
	
		/// <summary>
		/// All flags in this enum.
		/// </summary>
		All = Type | PositionUnderParent | Parent | Caption | FilePath | Icon | ExpandedIcon | Visible | BrowseObjectProperties | Capabilities | ProjectPropertiesContext | PropertySheet | IsLinked,
	}
	
	public interface IProjectItemTree : IProjectTree {
		Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext ProjectPropertiesContext { get; }
		Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet PropertySheet { get; }
		System.Boolean IsLinked { get; }
	}
	
	public partial class ProjectItemTree : ProjectTree, IProjectItemTree {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemTree DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet propertySheet;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean isLinked;
	
		/// <summary>Initializes a new instance of the ProjectItemTree class.</summary>
		protected ProjectItemTree(
			System.Int32 identity,
			System.String caption,
			System.String filePath,
			System.Drawing.Image icon,
			System.Drawing.Image expandedIcon,
			System.Boolean visible,
			Microsoft.VisualStudio.ProjectSystem.Properties.IRule browseObjectProperties,
			System.Collections.Immutable.ImmutableHashSet<System.String> capabilities,
			System.Collections.Immutable.ImmutableList<ProjectTree> children,
			Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext,
			Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet propertySheet,
			System.Boolean isLinked,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children)
		{
			this.projectPropertiesContext = projectPropertiesContext;
			this.propertySheet = propertySheet;
			this.isLinked = isLinked;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectItemTree Create(
			System.String caption,
			Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext,
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				caption: Optional.For(caption),
				filePath: Optional.For(filePath.GetValueOrDefault(DefaultInstance.FilePath)),
				icon: Optional.For(icon.GetValueOrDefault(DefaultInstance.Icon)),
				expandedIcon: Optional.For(expandedIcon.GetValueOrDefault(DefaultInstance.ExpandedIcon)),
				visible: Optional.For(visible.GetValueOrDefault(DefaultInstance.Visible)),
				browseObjectProperties: Optional.For(browseObjectProperties.GetValueOrDefault(DefaultInstance.BrowseObjectProperties)),
				capabilities: Optional.For(capabilities.GetValueOrDefault(DefaultInstance.Capabilities)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				projectPropertiesContext: Optional.For(projectPropertiesContext),
				propertySheet: Optional.For(propertySheet.GetValueOrDefault(DefaultInstance.PropertySheet)),
				isLinked: Optional.For(isLinked.GetValueOrDefault(DefaultInstance.IsLinked)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext ProjectPropertiesContext {
			get { return this.projectPropertiesContext; }
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet PropertySheet {
			get { return this.propertySheet; }
		}
	
		public System.Boolean IsLinked {
			get { return this.isLinked; }
		}
		
		/// <summary>Returns a new instance with the Caption property set to the specified value.</summary>
		public new ProjectItemTree WithCaption(System.String value) {
			return (ProjectItemTree)base.WithCaption(value);
		}
		
		/// <summary>Returns a new instance with the FilePath property set to the specified value.</summary>
		public new ProjectItemTree WithFilePath(System.String value) {
			return (ProjectItemTree)base.WithFilePath(value);
		}
		
		/// <summary>Returns a new instance with the Icon property set to the specified value.</summary>
		public new ProjectItemTree WithIcon(System.Drawing.Image value) {
			return (ProjectItemTree)base.WithIcon(value);
		}
		
		/// <summary>Returns a new instance with the ExpandedIcon property set to the specified value.</summary>
		public new ProjectItemTree WithExpandedIcon(System.Drawing.Image value) {
			return (ProjectItemTree)base.WithExpandedIcon(value);
		}
		
		/// <summary>Returns a new instance with the Visible property set to the specified value.</summary>
		public new ProjectItemTree WithVisible(System.Boolean value) {
			return (ProjectItemTree)base.WithVisible(value);
		}
		
		/// <summary>Returns a new instance with the BrowseObjectProperties property set to the specified value.</summary>
		public new ProjectItemTree WithBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule value) {
			return (ProjectItemTree)base.WithBrowseObjectProperties(value);
		}
		
		/// <summary>Returns a new instance with the Capabilities property set to the specified value.</summary>
		public new ProjectItemTree WithCapabilities(System.Collections.Immutable.ImmutableHashSet<System.String> value) {
			return (ProjectItemTree)base.WithCapabilities(value);
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public new ProjectItemTree WithCapabilities(params System.String[] values) {
			return (ProjectItemTree)base.WithCapabilities(values);
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public new ProjectItemTree WithCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			return (ProjectItemTree)base.WithCapabilities(values);
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public new ProjectItemTree AddCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			return (ProjectItemTree)base.AddCapabilities(values);
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public new ProjectItemTree AddCapabilities(params System.String[] values) {
			return (ProjectItemTree)base.AddCapabilities(values);
		}
		
		/// <summary>Adds the specified element from the Capabilities collection.</summary>
		public new ProjectItemTree AddCapability(System.String value) {
			return (ProjectItemTree)base.AddCapability(value);
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public new ProjectItemTree RemoveCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			return (ProjectItemTree)base.RemoveCapabilities(values);
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public new ProjectItemTree RemoveCapabilities(params System.String[] values) {
			return (ProjectItemTree)base.RemoveCapabilities(values);
		}
		
		/// <summary>Removes the specified element from the Capabilities collection.</summary>
		public new ProjectItemTree RemoveCapability(System.String value) {
			return (ProjectItemTree)base.RemoveCapability(value);
		}
		
		/// <summary>Clears all elements from the Capabilities collection.</summary>
		public new ProjectItemTree RemoveCapabilities() {
			return (ProjectItemTree)base.RemoveCapabilities();
		}
		
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectItemTree WithChildren(System.Collections.Immutable.ImmutableList<ProjectTree> value) {
			return (ProjectItemTree)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemTree WithChildren(params ProjectTree[] values) {
			return (ProjectItemTree)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemTree WithChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			return (ProjectItemTree)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemTree AddChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			return (ProjectItemTree)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemTree AddChildren(params ProjectTree[] values) {
			return (ProjectItemTree)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemTree AddChild(ProjectTree value) {
			return (ProjectItemTree)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemTree RemoveChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			return (ProjectItemTree)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemTree RemoveChildren(params ProjectTree[] values) {
			return (ProjectItemTree)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemTree RemoveChild(ProjectTree value) {
			return (ProjectItemTree)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemTree RemoveChildren() {
			return (ProjectItemTree)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the ProjectPropertiesContext property set to the specified value.</summary>
		public ProjectItemTree WithProjectPropertiesContext(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext value) {
			if (value == this.ProjectPropertiesContext) {
				return this;
			}
		
			return this.With(projectPropertiesContext: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the PropertySheet property set to the specified value.</summary>
		public ProjectItemTree WithPropertySheet(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet value) {
			if (value == this.PropertySheet) {
				return this;
			}
		
			return this.With(propertySheet: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the IsLinked property set to the specified value.</summary>
		public ProjectItemTree WithIsLinked(System.Boolean value) {
			if (value == this.IsLinked) {
				return this;
			}
		
			return this.With(isLinked: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectTree WithCore(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>)) {
			return this.WithFactory(
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemTree With(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext> projectPropertiesContext = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			return (ProjectItemTree)this.WithCore(
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children,
				projectPropertiesContext: projectPropertiesContext,
				propertySheet: propertySheet,
				isLinked: isLinked);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectItemTree WithCore(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext> projectPropertiesContext = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				caption: Optional.For(caption.GetValueOrDefault(this.Caption)),
				filePath: Optional.For(filePath.GetValueOrDefault(this.FilePath)),
				icon: Optional.For(icon.GetValueOrDefault(this.Icon)),
				expandedIcon: Optional.For(expandedIcon.GetValueOrDefault(this.ExpandedIcon)),
				visible: Optional.For(visible.GetValueOrDefault(this.Visible)),
				browseObjectProperties: Optional.For(browseObjectProperties.GetValueOrDefault(this.BrowseObjectProperties)),
				capabilities: Optional.For(capabilities.GetValueOrDefault(this.Capabilities)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				projectPropertiesContext: Optional.For(projectPropertiesContext.GetValueOrDefault(this.ProjectPropertiesContext)),
				propertySheet: Optional.For(propertySheet.GetValueOrDefault(this.PropertySheet)),
				isLinked: Optional.For(isLinked.GetValueOrDefault(this.IsLinked)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemTree WithFactory(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext> projectPropertiesContext = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(caption.IsDefined && caption.Value != this.Caption) || 
				(filePath.IsDefined && filePath.Value != this.FilePath) || 
				(icon.IsDefined && icon.Value != this.Icon) || 
				(expandedIcon.IsDefined && expandedIcon.Value != this.ExpandedIcon) || 
				(visible.IsDefined && visible.Value != this.Visible) || 
				(browseObjectProperties.IsDefined && browseObjectProperties.Value != this.BrowseObjectProperties) || 
				(capabilities.IsDefined && capabilities.Value != this.Capabilities) || 
				(children.IsDefined && children.Value != this.Children) || 
				(projectPropertiesContext.IsDefined && projectPropertiesContext.Value != this.ProjectPropertiesContext) || 
				(propertySheet.IsDefined && propertySheet.Value != this.PropertySheet) || 
				(isLinked.IsDefined && isLinked.Value != this.IsLinked)) {
				return new ProjectItemTree(
					identity: identity.GetValueOrDefault(this.Identity),
					caption: caption.GetValueOrDefault(this.Caption),
					filePath: filePath.GetValueOrDefault(this.FilePath),
					icon: icon.GetValueOrDefault(this.Icon),
					expandedIcon: expandedIcon.GetValueOrDefault(this.ExpandedIcon),
					visible: visible.GetValueOrDefault(this.Visible),
					browseObjectProperties: browseObjectProperties.GetValueOrDefault(this.BrowseObjectProperties),
					capabilities: capabilities.GetValueOrDefault(this.Capabilities),
					children: children.GetValueOrDefault(this.Children),
					projectPropertiesContext: projectPropertiesContext.GetValueOrDefault(this.ProjectPropertiesContext),
					propertySheet: propertySheet.GetValueOrDefault(this.PropertySheet),
					isLinked: isLinked.GetValueOrDefault(this.IsLinked));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemTree whose fields are initialized with default values.</summary>
		private static ProjectItemTree GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemTree(
				default(System.Int32),
				template.Caption,
				template.FilePath,
				template.Icon,
				template.ExpandedIcon,
				template.Visible,
				template.BrowseObjectProperties,
				template.Capabilities,
				template.Children,
				template.ProjectPropertiesContext,
				template.PropertySheet,
				template.IsLinked,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Caption { get; set; }
	
			internal System.String FilePath { get; set; }
	
			internal System.Drawing.Image Icon { get; set; }
	
			internal System.Drawing.Image ExpandedIcon { get; set; }
	
			internal System.Boolean Visible { get; set; }
	
			internal Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties { get; set; }
	
			internal System.Collections.Immutable.ImmutableHashSet<System.String> Capabilities { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectTree> Children { get; set; }
	
			internal Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext ProjectPropertiesContext { get; set; }
	
			internal Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet PropertySheet { get; set; }
	
			internal System.Boolean IsLinked { get; set; }
		}
		
		public RootedProjectItemTree AsRoot {
			get { return new RootedProjectItemTree(this, this); }
		}
		
		public new RootedProjectItemTree WithRoot(ProjectTree root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectItemTree(this, root);
		}
		
		protected override ProjectTreeChangedProperties DiffProperties(ProjectTree other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectItemTree = other as ProjectItemTree;
			if (otherProjectItemTree != null) {
				if (this.ProjectPropertiesContext != otherProjectItemTree.ProjectPropertiesContext) {
					propertiesChanged |= ProjectTreeChangedProperties.ProjectPropertiesContext;
				}
		
				if (this.PropertySheet != otherProjectItemTree.PropertySheet) {
					propertiesChanged |= ProjectTreeChangedProperties.PropertySheet;
				}
		
				if (this.IsLinked != otherProjectItemTree.IsLinked) {
					propertiesChanged |= ProjectTreeChangedProperties.IsLinked;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectItemTree CreateWithIdentity(
				System.String caption,
				Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext,
				ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
				ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
				ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
				ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
				ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					caption: Optional.For(caption),
					filePath: Optional.For(filePath.GetValueOrDefault(DefaultInstance.FilePath)),
					icon: Optional.For(icon.GetValueOrDefault(DefaultInstance.Icon)),
					expandedIcon: Optional.For(expandedIcon.GetValueOrDefault(DefaultInstance.ExpandedIcon)),
					visible: Optional.For(visible.GetValueOrDefault(DefaultInstance.Visible)),
					browseObjectProperties: Optional.For(browseObjectProperties.GetValueOrDefault(DefaultInstance.BrowseObjectProperties)),
					capabilities: Optional.For(capabilities.GetValueOrDefault(DefaultInstance.Capabilities)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					projectPropertiesContext: Optional.For(projectPropertiesContext),
					propertySheet: Optional.For(propertySheet.GetValueOrDefault(DefaultInstance.PropertySheet)),
					isLinked: Optional.For(isLinked.GetValueOrDefault(DefaultInstance.IsLinked)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public ProjectTree ToProjectTree() {
			return ProjectTree.CreateWithIdentity(
				caption: this.Caption,
				filePath: Optional.For(this.FilePath),
				icon: Optional.For(this.Icon),
				expandedIcon: Optional.For(this.ExpandedIcon),
				visible: Optional.For(this.Visible),
				browseObjectProperties: Optional.For(this.BrowseObjectProperties),
				capabilities: Optional.For(this.Capabilities),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectTree.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectItemTree immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext projectPropertiesContext;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet propertySheet;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Boolean isLinked;
		
			internal Builder(ProjectItemTree immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.projectPropertiesContext = immutable.ProjectPropertiesContext;
				this.propertySheet = immutable.PropertySheet;
				this.isLinked = immutable.IsLinked;
			}
		
			public Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext ProjectPropertiesContext {
				get {
					return this.projectPropertiesContext;
				}
		
				set {
					this.projectPropertiesContext = value;
				}
			}
		
			public Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet PropertySheet {
				get {
					return this.propertySheet;
				}
		
				set {
					this.propertySheet = value;
				}
			}
		
			public System.Boolean IsLinked {
				get {
					return this.isLinked;
				}
		
				set {
					this.isLinked = value;
				}
			}
		
			public new ProjectItemTree ToImmutable() {
				var capabilities = this.capabilities.IsDefined ? (this.capabilities.Value != null ? this.capabilities.Value.ToImmutable() : null) : this.immutable.Capabilities;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Caption),
					ImmutableObjectGraph.Optional.For(this.FilePath),
					ImmutableObjectGraph.Optional.For(this.Icon),
					ImmutableObjectGraph.Optional.For(this.ExpandedIcon),
					ImmutableObjectGraph.Optional.For(this.Visible),
					ImmutableObjectGraph.Optional.For(this.BrowseObjectProperties),
					ImmutableObjectGraph.Optional.For(capabilities),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.ProjectPropertiesContext),
					ImmutableObjectGraph.Optional.For(this.PropertySheet),
					ImmutableObjectGraph.Optional.For(this.IsLinked));
			}
		}
	}
	
	public partial struct RootedProjectItemTree : System.IEquatable<RootedProjectItemTree>, IRecursiveParent {
		private static readonly System.Func<RootedProjectTree, ProjectTree> toUnrooted = r => r.ProjectTree;
		private static readonly System.Func<ProjectTree, ProjectTree, RootedProjectTree> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectItemTree greenNode;
	
		private readonly ProjectTree root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectTree, RootedProjectTree, ProjectTree>> children;
	
		internal RootedProjectItemTree(ProjectItemTree projectItemTree, ProjectTree root) {
			this.greenNode = projectItemTree;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectTree, RootedProjectTree, ProjectTree>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectTree Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectItemTree);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectTree);
			}
		}
	
		public RootedProjectTree Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectTree); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectTree AsProjectTree {
			get { return this.greenNode != null ? ((ProjectTree)this.greenNode).WithRoot(this.root) : default(RootedProjectTree); }
		}
	
		public System.String Caption {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Caption;
			}
		}
		
		/// <summary>Returns a new instance with the Caption property set to the specified value.</summary>
		public RootedProjectItemTree WithCaption(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCaption(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String FilePath {
			get {
				this.ThrowIfDefault();
				return this.greenNode.FilePath;
			}
		}
		
		/// <summary>Returns a new instance with the FilePath property set to the specified value.</summary>
		public RootedProjectItemTree WithFilePath(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithFilePath(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Drawing.Image Icon {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Icon;
			}
		}
		
		/// <summary>Returns a new instance with the Icon property set to the specified value.</summary>
		public RootedProjectItemTree WithIcon(System.Drawing.Image value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithIcon(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Drawing.Image ExpandedIcon {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ExpandedIcon;
			}
		}
		
		/// <summary>Returns a new instance with the ExpandedIcon property set to the specified value.</summary>
		public RootedProjectItemTree WithExpandedIcon(System.Drawing.Image value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithExpandedIcon(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Boolean Visible {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Visible;
			}
		}
		
		/// <summary>Returns a new instance with the Visible property set to the specified value.</summary>
		public RootedProjectItemTree WithVisible(System.Boolean value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithVisible(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IRule BrowseObjectProperties {
			get {
				this.ThrowIfDefault();
				return this.greenNode.BrowseObjectProperties;
			}
		}
		
		/// <summary>Returns a new instance with the BrowseObjectProperties property set to the specified value.</summary>
		public RootedProjectItemTree WithBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithBrowseObjectProperties(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Collections.Immutable.ImmutableHashSet<System.String> Capabilities {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Capabilities;
			}
		}
		
		/// <summary>Returns a new instance with the Capabilities property set to the specified value.</summary>
		public RootedProjectItemTree WithCapabilities(System.Collections.Immutable.ImmutableHashSet<System.String> value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCapabilities(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public RootedProjectItemTree WithCapabilities(params System.String[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Capabilities collection with the specified collection.</summary>
		public RootedProjectItemTree WithCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public RootedProjectItemTree AddCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Capabilities collection.</summary>
		public RootedProjectItemTree AddCapabilities(params System.String[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Capabilities collection.</summary>
		public RootedProjectItemTree AddCapability(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddCapability(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public RootedProjectItemTree RemoveCapabilities(System.Collections.Generic.IEnumerable<System.String> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Capabilities collection.</summary>
		public RootedProjectItemTree RemoveCapabilities(params System.String[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapabilities(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Capabilities collection.</summary>
		public RootedProjectItemTree RemoveCapability(System.String value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapability(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Capabilities collection.</summary>
		public RootedProjectItemTree RemoveCapabilities() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveCapabilities();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectTree> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public RootedProjectItemTree WithChildren(System.Collections.Immutable.IImmutableList<RootedProjectTree> value) {
			this.ThrowIfDefault();
			var adapter = (ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectTree>)value;
			var mutatedLeaf = this.greenNode.WithChildren(adapter.UnderlyingCollection);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemTree WithChildren(params RootedProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemTree WithChildren(System.Collections.Generic.IEnumerable<RootedProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemTree AddChildren(System.Collections.Generic.IEnumerable<RootedProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemTree AddChildren(params RootedProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemTree, RootedProjectTree> AddChild(RootedProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectTree);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectTree(value.ProjectTree, newParent.Root.ProjectTree);
			return new ParentedRecursiveType<RootedProjectItemTree, RootedProjectTree>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemTree RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemTree RemoveChildren(params RootedProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectTree));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemTree RemoveChild(RootedProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectTree);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemTree WithChildren(params ProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemTree WithChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemTree AddChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemTree AddChildren(params ProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemTree, RootedProjectTree> AddChild(ProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectTree(value, newParent.Root.ProjectTree);
			return new ParentedRecursiveType<RootedProjectItemTree, RootedProjectTree>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemTree RemoveChildren(System.Collections.Generic.IEnumerable<ProjectTree> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemTree RemoveChildren(params ProjectTree[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemTree RemoveChild(ProjectTree value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectItemTree RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext ProjectPropertiesContext {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ProjectPropertiesContext;
			}
		}
		
		/// <summary>Returns a new instance with the ProjectPropertiesContext property set to the specified value.</summary>
		public RootedProjectItemTree WithProjectPropertiesContext(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithProjectPropertiesContext(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet PropertySheet {
			get {
				this.ThrowIfDefault();
				return this.greenNode.PropertySheet;
			}
		}
		
		/// <summary>Returns a new instance with the PropertySheet property set to the specified value.</summary>
		public RootedProjectItemTree WithPropertySheet(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithPropertySheet(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.Boolean IsLinked {
			get {
				this.ThrowIfDefault();
				return this.greenNode.IsLinked;
			}
		}
		
		/// <summary>Returns a new instance with the IsLinked property set to the specified value.</summary>
		public RootedProjectItemTree WithIsLinked(System.Boolean value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithIsLinked(value);
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectItemTree ProjectItemTree {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectItemTree With(
			ImmutableObjectGraph.Optional<System.String> caption = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> filePath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> icon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Drawing.Image> expandedIcon = default(ImmutableObjectGraph.Optional<System.Drawing.Image>),
			ImmutableObjectGraph.Optional<System.Boolean> visible = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule> browseObjectProperties = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IRule>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>> capabilities = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableHashSet<System.String>>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectTree>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectTree>>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext> projectPropertiesContext = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext>),
			ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet> propertySheet = default(ImmutableObjectGraph.Optional<Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet>),
			ImmutableObjectGraph.Optional<System.Boolean> isLinked = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				caption: caption,
				filePath: filePath,
				icon: icon,
				expandedIcon: expandedIcon,
				visible: visible,
				browseObjectProperties: browseObjectProperties,
				capabilities: capabilities,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectTree>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectTree>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectTree>>),
				projectPropertiesContext: projectPropertiesContext,
				propertySheet: propertySheet,
				isLinked: isLinked);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectTree.DiffGram> ChangesSince(RootedProjectItemTree priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectItemTree);
		}
		
		public RootedProjectTree ToProjectTree() {
			var newGreenNode = this.greenNode.ToProjectTree();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectItemTree) {
				var other = (RootedProjectItemTree)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectItemTree other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectItemTree NewSpine(ProjectItemTree leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectItemTree.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
}


